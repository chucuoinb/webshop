<?php
/**
 * Created by PhpStorm.
 * User: root
 * Date: 05/03/2018
 * Time: 16:07
 */
class Model_Category extends Model{
    const MAIN_TABLE = 'category';
    protected $_data;
    protected $_data_filter = array();
    protected $table_construct = array(
        'id' => 'id',
        'name' => 'name',
        'status' => 'status',
        'parent_id' => 'parent_id',
        'level' => 'level',
        'updated_at' => 'update_at',
        'created_at' => 'create_at',
        'description' => 'description',
        'url_key' => 'url_key',
        'position' => 'position',
        'path' => 'path',
        'product_count' => 'product_count',
    );
    public function __construct()
    {
        parent::__construct();
        $this->_main_table = self::MAIN_TABLE;
    }
    public function beforeSave(){
        $sync_data = array();
        foreach ($this->table_construct as $label=>$value){
            if(isset($this->_data[$value])){
                $sync_data[$value] = $this->_data[$value];
            }
        }
        if(!isset($sync_data['created_at'])){
            $sync_data['created_at'] = $this->getNewDate();
        }
        if(!isset($sync_data['updated_at'])){
            $sync_data['updated_at'] = $this->getNewDate();
        }
        if(!isset($sync_data['url_key'])){
            if(isset($sync_data['name']) && $sync_data['name']){
                $sync_data['url_key'] = $this->generateUrlKey($sync_data['name']);
            }
        }
        return $sync_data;
    }

    public function save()
    {
        parent::save(); // TODO: Change the autogenerated stub

    }

    public function getName(){
        return $this->getData('name');
    }
    public function getStatus(){
        return $this->getData('status');
    }
    public function getParentId(){
        return $this->getData('parent_id');
    }
    public function getLevel(){
        return $this->getData('level');
    }
    public function getUpdateAt(){
        return $this->getData('updated_at');
    }
    public function getCreateAt(){
        return $this->getData('created_at');
    }
    public function getPosition(){
        return $this->getData('position');
    }
    public function getDescription(){
        return $this->getData('description');
    }
    public function getPath(){
        return $this->getData('path');
    }
    public function getProductCount(){
        return $this->getData('product_count');
    }
    public function getUrlKey(){
        return $this->getData('url_key');
    }
    public function isUrlKeyExist($url_key){
        $url_key_exist = $this->addFieldToFilter($this->table_construct['url_key'],$url_key)->filter();
        return count($url_key_exist)>0;
    }
    public function generateUrlKey($name)
    {

        $string = $name;
        $string = preg_replace('/ä/', 'ae', $string);
        $string = preg_replace('/ü/', 'ue', $string);
        $string = preg_replace('/ö/', 'oe', $string);
        $string = preg_replace('/ß/', 'ss', $string);
        $name   = $string;

        $url_def     = $this->formatUrlKey($name);
        $cur_url_key = $url_def;
        $i = 0;
        while ($this->isUrlKeyExist($cur_url_key)){
            $i ++;
            $cur_url_key = $url_def.'-'.$i;
        }

        return $cur_url_key;
    }
    public function formatUrlKey($str)
    {
        $urlKey = preg_replace('#[^0-9a-z]+#i', '-', $str);
        $urlKey = strtolower($urlKey);
        $urlKey = trim($urlKey, '-');

        return $urlKey;
    }

    public function getCategoryChildren(){
        $id = $this->getId();
        if(!$id){
            return false;
        }
        return $this->addFieldToFilter('parent_id',$id)->filter();
        
    }
}